const { join } = require('path');
const { prompt } = require('inquirer');
const ora = require('ora');
const loadConfig = require('../lib/loadConfig');

const { generateReactCode, initReactBase } = require('../lib/utils/react2Code');

const confirmQuestions = [
  { key: 'isNeedQuery', text: 'Êü•ËØ¢' },
  { key: 'isNeedAdd', text: 'Ê∑ªÂä†' },
  { key: 'isNeedEdit', text: 'ÁºñËæë' },
  { key: 'isNeedDelete', text: 'Âà†Èô§' },
  { key: 'isNeedDefine', text: 'ÂçïÊù°Ëá™ÂÆö‰πâ' },
  { key: 'isNeedBatchDelete', text: 'ÊâπÈáèÂà†Èô§' },
  { key: 'isNeedBatchDefine', text: 'ÊâπÈáèËá™ÂÆö‰πâ' },
];

// ‰∫§‰∫íÈóÆÈ¢òÈááÈõÜ
const questions = [
  {
    type: 'input',
    name: 'model',
    message: 'Êñ∞Ê®°ÂùóÂêçÁß∞ÔºàËã±ÊñáÔºâ:',
    default: 'model-a',
  },
  {
    type: 'input',
    name: 'file',
    message: 'Êñ∞Ê®°ÂùóÊñá‰ª∂ÂêçÁß∞ÔºàËã±ÊñáÔºâ:',
    default: 'index',
  },
  {
    type: 'confirm',
    name: 'isReset',
    message: 'ÊòØÂê¶ÈúÄË¶ÅÂàùÂßãÂåñ/ÈáçÁΩÆÂü∫Á°ÄÁªÑ‰ª∂:',
    default: 'N',
  },
  {
    type: 'input',
    name: 'title',
    message: '‰∏öÂä°Ê†áÈ¢ò:',
    default: 'Ê†áÈ¢ò',
  },
  {
    type: 'list',
    name: 'containerType',
    message: '‰∫§‰∫íÊñπÂºè:',
    choices: ['Modal', 'Panel'],
    default: 'Modal',
  },
];

confirmQuestions.forEach(it =>
  questions.push({
    type: 'confirm',
    name: it.key,
    message: `ÊòØÂê¶ÈúÄË¶Å${it.text}ÂäüËÉΩ:`,
    default: 'Y',
  }),
);

const config = loadConfig();
// TODO Ê†°È™åÂàùÂßãÂåñ‰∏éÂê¶ÔºåÁªô‰∫àÂêàÁêÜÊèêÁ§∫

// Ê†°È™åÊòØÂê¶‰ΩøÁî® typescript
const isTypescript = config?.featureList?.includes('typescript');
const templatePath = join(
  __dirname,
  `../lib/react/${isTypescript ? '' : 'jsx'}`,
);

const react2code = program => {
  program
    .command('react2code')
    .alias('r2c')
    .usage('-o <output>')
    .description('üçâ generate react code of crud')
    .option('-o, --output <output>', 'path of generation file')

    .action(({ output }) => {
      prompt(questions).then(answers => {
        const { isReset } = answers;

        Object.assign(answers, { isTs: isTypescript });

        // write path
        const toPath = join(process.cwd(), output || '');

        const spinner = ora(
          `üçâ generate react code of ${answers.model} ...... \n`,
        );
        spinner.start();

        try {
          // init/reset base components
          isReset && initReactBase(templatePath, toPath);

          // generate react crud code
          generateReactCode(templatePath, toPath, answers);

          setTimeout(() => {
            spinner.text = 'generate success';
            setTimeout(() => {
              spinner.stop();
            }, 400);
          }, 1200);
        } catch (error) {
          spinner.stop();
        }
      });
    });
};

module.exports = react2code;
